EC440 Project 5: File System
Rawisara Chairat, U65053623

The task of this project is to implement a simple file system on top of a virtual disk. In order to do so we need to implement:

1. make_fs
    - This function will create a filesystem on a virtual disk.
    - Then, it will initialize the superblock, FAT, and directory structures.
    - The information needed in the superblock are where the FAT blocks started, the number of blocks that FAT uses, where the directory block started, the number of block that directory uses, lastly where the data blocks started.
    - In the way that I implemented the data blocks didn't started at the middle of the 8,192 blocks but it started right after the directory block. By doing this, the data that can be stored here is bigger than 16MB.
    - It will return -1 if the file already exists or creation fails.

2. mount_fs
    - This function will load filesystem metadata (superblock, FAT, directory) from the disk into memory

3. unmount_fs
    - This function will load metadata (superblock, FAT, directory) back to the disk.
    - Then, it will free all allocated memory and closes the disk.

4. fs_open
    - This function will open a file by the name that being sent in.
    - It will then searche the directory and assigns a file descriptor if the file exists and increases the reference count of the file.
    - This function will return -1, if the file does not exist or descriptors are unavailable.

5. fs_close
    - This function will close the file descriptor and reduces the reference count.
    - It will mark the description as available to be used again.

6. fs_create
    - This function will create a new file with the specified name.
    - It will then allocate a directory entry and initializes its metadata.
    - This function will return -1 if the file already exists or directory slots are full

7. fs_delete
    - This function will delete a file by name by freeing the FAT entry uses by the file and clears the directory entry as well.
    - This function will return -1, if the file is open or doesnt' exist

8. fs_read
    - This function will read up to nbyte bytes from a file starting at the current offset. Then, it copies data into the buffer and updates the offset.
    - It also handles reading across multiple blocks if needed.
    - Lastly, it returns the number of bytes read or an error if the read fails.

9. fs_write
    - This function will write up to nbyte bytes to a file starting at the current offset. Then, iy allocates new blocks if needed to extend the file. Updates the offset and writes data across multiple blocks if required.
    - Lastly, it returns the number of bytes written or an error if the write fails.

10. fs_get_filesize
    - This function returns the size of the file associated with the file descriptor.
    - It will return -1, if the descriptor is invalid or unused

11. fs_listfiles
    - This function will list all active files in the directory by name.By allocating memory for the file list, which must be freed by the caller.
    - It will returns -1, if memory allocation fails.

12. fs_lseek
    - This function will adjust the file descriptor offset to the specified position.
    - It also make sure that the offset does not exceed the file size.
    - It will returns -1, iif the offset is invalid.

13. fs_truncate
    - This function will truncate the file to the specified length by freeing FAT blocks beyond the truncation point. It will update file size and file descriptor offset accordingly.
    - Lastly, iy will return -1, if the length exceeds the file size or the truncate fails.

Problem: My code passed almost all the test cases plus some of the extra credit but it couldn't pass the test8d: Write 15MB file, seek end, write 2MB --> 1MB must be written. I think the reason being that my system aould store more that 16MB of data which is why when writing 15MB file into it and write 2MB more, it would be able to do so since there are enough space to write the 2MB.